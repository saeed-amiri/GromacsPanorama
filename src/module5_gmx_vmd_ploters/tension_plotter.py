"""
Plot Tension from Simulation Data

This script plots the computed tension from simulation data.
It includes several plot types:

    1. Separate plots for 'no NP' and 'singles NP' data.
    2. A combined plot of both 'no NP' and 'singles NP'.
    3. Plots in both normal and logarithmic scales.
    4. Plots with error bars, based on bootstrap data if available.

The data is expected in a simple columnar format, generated by a bash
script. The columns are as follows:

    Name: Identifier of the data point (e.g., '0Oda', '5Oda').
    nr. Oda: Numerical value associated with the 'Name'.
    tension: Computed tension value.
    errorbar: Error value, if available (used for plotting error bars).

Notes:
    - The '0Oda' value is crucial as it represents the baseline for
        plotting differences.
    - The presence of an 'errorbar' value determines whether error bars
        are included in the plot.
Opt. by ChatGpt
Saeed
17 Jan 2023
"""


import typing
from dataclasses import dataclass, field

import pandas as pd
import matplotlib.pyplot as plt

from common import logger
from common import plot_tools
from common import my_tools
from common.colors_text import TextColor as bcolors


@dataclass
class BaseConfig:
    """
    Basic configurations and setup for the plots.
    """
    graph_suffix: str = 'tension.png'

    labels: dict[str, str] = field(default_factory=lambda: {
        'title': 'Computed Tension',
        'ylabel': r'$\gamma$',
        'xlabel': 'Nr. Oda'
    })

    graph_styles: dict[str, typing.Any] = field(default_factory=lambda: {
        'legend': r'$\gamma$',
        'color': 'black',
        'marker': 'o',
        'linestyle': '--',
        'markersize': 5,
        'second_markersize': 4
    })

    line_styles: list[str] = \
        field(default_factory=lambda: ['-', ':', '--', '-.'])
    colors: list[str] = \
        field(default_factory=lambda: ['black', 'red', 'blue', 'green'])

    height_ratio: float = 5 ** 0.5 - 1


@dataclass
class SimpleGraph(BaseConfig):
    """
    Parameters for simple data plots.
    """


@dataclass
class LogGraph(BaseConfig):
    """
    Parameters for the semilog plots.
    """
    labels: dict[str, str] = field(default_factory=lambda: {
        'title': 'Computed Tension',
        'ylabel': r'log($\gamma$)',
        'xlabel': 'Nr. Oda'
    })


@dataclass
class ErrorBarGraph(BaseConfig):
    """
    Parameters for plots with error bars.
    """
    plot_errorbars: bool = True


@dataclass
class FileConfigs:
    """
    Set the name of the input files for plot with labels say what are
    those
    """
    fnames: dict[str, str] = field(default_factory=lambda: {
        'with_np': 'tension.log'})


@dataclass
class AllConfig(FileConfigs):
    """
    Consolidates all configurations for different graph types.
    """
    simple_config: SimpleGraph = field(default_factory=SimpleGraph)
    log_config: LogGraph = field(default_factory=LogGraph)
    errbar_config: ErrorBarGraph = field(default_factory=ErrorBarGraph)


class PlotTension:
    """
    Plot all the graphes
    """

    info_msg: str = 'Message from PlotTension:\n'
    configs: "AllConfig"

    def __init__(self,
                 log: logger.logging.Logger,
                 configs: "AllConfig" = AllConfig()
                 ) -> None:
        self.configs = configs
        tension_dict: dict[str, pd.DataFrame] = self._initiate_data(log)
        self.initiate_plots(tension_dict)
        self.write_msg(log)

    def _initiate_data(self,
                       log: logger.logging.Logger
                       ) -> pd.DataFrame:
        """read files and return the data in dataframes format"""
        tension_dict: dict[str, pd.DataFrame] = {}
        for key, fname in self.configs.fnames.items():
            my_tools.check_file_exist(fname, log)
            tension_dict[key] = self.read_file(fname)
        return tension_dict

    def read_file(self,
                  fname: str
                  ) -> pd.DataFrame:
        """read data file and return as a dataframe"""
        columns: list[str] = ['Name', 'nr.Oda', 'tension', 'errorbar']
        df_in: pd.DataFrame = \
            pd.read_csv(fname, delim_whitespace=True, names=columns)
        return df_in

    def initiate_plots(self,
                       tension_dict: dict[str, pd.DataFrame]
                       ) -> None:
        """plots the graphes"""
        nr_files: int = len(tension_dict)
        for key, tension in tension_dict.items():
            self.plot_raw_data(key, tension)

    def plot_raw_data(self,
                      key: str,
                      tension: pd.DataFrame
                      ) -> None:
        """plot the raw data for later conviniance"""
        configs: "SimpleGraph" = self.configs.simple_config
        x_range: tuple[float, float] = (min(tension['nr.Oda']),
                                        max(tension['nr.Oda']))
        fig_i: plt.figure
        ax_i: plt.axes
        fig_i, ax_i = \
            plot_tools.mk_canvas(x_range, height_ratio=configs.height_ratio)
        ax_i.plot(tension['nr.Oda'],
                  tension['tension'],
                  c=configs.graph_styles['color'],
                  ls=configs.graph_styles['linestyle'],
                  ms=configs.graph_styles['markersize'],
                  marker=configs.graph_styles['marker'],
                  label=configs.graph_styles['legend'])

        ax_i.set_xlabel(configs.labels['xlabel'])
        ax_i.set_ylabel(f'{configs.labels["ylabel"]} [bar/nm]')
        ax_i.set_title(f'{configs.labels["title"]} ({key})')
        ax_i.grid(True, linestyle='--', color='gray', alpha=0.5)
        plot_tools.save_close_fig(
            fig_i, ax_i, fname := f'raw_{configs.graph_suffix}')
        self.info_msg += \
            f'\tThe raw tension plot for `{key}` is saved as `{fname}`\n'

    def write_msg(self,
                  log: logger.logging.Logger  # To log
                  ) -> None:
        """write and log messages"""
        print(f'{bcolors.OKCYAN}{PlotTension.__name__}:\n'
              f'\t{self.info_msg}{bcolors.ENDC}')
        log.info(self.info_msg)


if __name__ == '__main__':
    PlotTension(log=logger.setup_logger('plot_tension.log'))
