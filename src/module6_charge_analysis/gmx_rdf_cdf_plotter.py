"""
Plot GROMACS Data (RDF and CDF) from XVG Files

This script is intended for visualizing and analyzing data generated
by GROMACS, specifically focusing on the Radial Distribution Function
(RDF) and Cumulative Distribution Function (CDF) data contained within
xvg file formats. The script reads xvg files, extracts the relevant
data, and produces plots for easy interpretation and analysis of
molecular dynamics simulations.



Key Features:
- Supports parsing and plotting of RDF and CDF data from GROMACS xvg
    files.
- Customizable plotting options for clarity, presentation, and detailed
    analysis.
- Error handling for common issues encountered in xvg file parsing.
- Option to save plots in various formats for reporting and further
    use.

Usage:
The input shohld be in dataframe type, with xvg format.
The script requires DataFrame type data with xvg format by GROMACS as
input.
Users can customize plot attributes such as labels, colors, and line
styles. The resulting plots can be displayed on-screen or saved to a
file in formats like PNG, JPEG, or PDF.

Example:
    python plot_gromacs_data.py

Note:
This script assumes a basic understanding of GROMACS output formats
and molecular dynamics simulation data.
It is designed to work with standard xvg file formats as generated by
GROMACS tools.

doc string by: ChatGpt
4 Jan, 2024
Saeed
"""

import typing
from dataclasses import dataclass, field

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from common import logger
from common import plot_tools
from common.colors_text import TextColor as bcolors


@dataclass
class BaseGraphConfigs:
    """Basic configurations for plot and saving"""
    graph_suffix: str
    graph_legend: str
    title: str
    ylabel: str
    xlabel: str = 'Distance from Nanoparticle [A]'
    graph_style: dict = field(default_factory=lambda: {
        'legend': 'density',
        'color': 'k',
        'marker': 'o',
        'linestyle': '-',
        'markersize': 0,
        '2nd_marksize': 1
    })
    graph_2nd_legend: str = 'g(r)'
    height_ratio: float = 5**0.5-1


@dataclass
class RdfGraphConfigs(BaseGraphConfigs):
    """configuration for rdf plotting"""
    graph_suffix: str = 'gmx.png'
    graph_legend: str = 'rdf'
    title: str = 'Rdf vs Distance (from outmost atoms of NP)'
    ylabel: str = 'g(r)'


@dataclass
class CdfGraphConfigs(BaseGraphConfigs):
    """configuration for rdf plotting"""
    graph_suffix: str = 'gmx.png'
    graph_legend: str = 'cdf'
    title: str = 'Cdf vs Distanec'
    ylabel: str = 'xdf'


@dataclass
class AllGraphConfigs:
    """all the configurations for the plots"""
    rdf_configs: "RdfGraphConfigs" = RdfGraphConfigs()
    cdf_configs: "CdfGraphConfigs" = CdfGraphConfigs()


class PlotGmxRdfCdf:
    """Plot rdf and cdf from Gromacs or its optimized one"""

    info_msg: str = 'Message from PlotGmxRdfCdf:\n'
    df_in: pd.DataFrame
    df_type: str
    configs: "AllGraphConfigs"

    def __init__(self,
                 df_in: pd.DataFrame,
                 df_type: str,
                 log: logger.logging.Logger,
                 configs: "AllGraphConfigs" = AllGraphConfigs()
                 ) -> None:
        self.df_in = df_in
        self.df_type = df_type
        self.configs = configs
        self._initiate(log)

    def _initiate(self,
                  log: logger.logging.Logger
                  ) -> None:
        """Plot the graphs here"""
        if self.df_type == 'rdf':
            self._plot_rdf(self.df_in, self.configs.rdf_configs)

    def _plot_rdf(self,
                  df_in: pd.DataFrame,
                  configs: "RdfGraphConfigs"
                  ) -> None:
        """plot rdf figure"""
        if '_nm' in list(df_in.columns)[0]:
            df_in.iloc[:, 0] *= 10
        self._plot_graphes(df_in, configs)

    def _plot_graphes(self,
                      df_in: pd.DataFrame,
                      configs: typing.Union["RdfGraphConfigs",
                                            "CdfGraphConfigs"],
                      return_ax: bool = False
                      ) -> tuple[plt.figure, plt.axes]:
        """plot graphs"""
        radii = np.array(df_in.iloc[:, 0])
        dens_values = np.array(df_in.iloc[:, 1])
        ax_i: plt.axes
        fig_i: plt.figure
        fig_i, ax_i = plot_tools.mk_canvas((np.min(radii), np.max(radii)),
                                           height_ratio=configs.height_ratio)
        ax_i.plot(radii,
                  dens_values,
                  marker=configs.graph_style['marker'],
                  linestyle=configs.graph_style['linestyle'],
                  color=configs.graph_style['color'],
                  label=configs.graph_legend,
                  markersize=configs.graph_style['markersize'])
        ax_i.set_xlabel(configs.xlabel)
        ax_i.set_ylabel(configs.ylabel)
        ax_i.set_title(configs.title)
        # Set grid for primary axis
        ax_i.grid(True, linestyle='--', color='gray', alpha=0.5)

        if not return_ax:
            fout: str = f'{self.df_type}_{configs.graph_suffix}'
            plot_tools.save_close_fig(
                fig_i, ax_i, fout, loc='upper left')
            self.info_msg += f'\tThe density graph saved: `{fout}`\n'
        return fig_i, ax_i


if __name__ == "__main__":
    print(f'{bcolors.CAUTION}\n\tThis script is called within '
          f'np_charge_analysis.py\n{bcolors.ENDC}')
