"""
This module processes data from the order_parameter_pickle file, which
is generated by the trajectory_to_order_parameter.py script. It focuses
on splitting and organizing data based on residue types for further
analysis.

File Contents:
    The order_parameter_pickle file contains the tensor of the order
    parameter for each residue in the x, y, and z axes. These parameters
    are computed specifically for water (SOL), oil (ODA), and decane
    (D10), with other residues set to zero.

Array Structure:
    The data within the pickle file is structured as follows:

    Rows: The total number of rows equals the number of frames in the
    simulation plus two additional rows. These additional rows are
    used for:
        Identifying the type of each residue (-1 row).
        Storing the original index of the residues as found in the
        trajectory file (-2 row).

    Columns: The columns are organized to represent various data points:
        The first column (0 index) represents the time frame of the
        simulation.
        The next three columns (1 to 3 index) store the center of mass
        of the nanoparticle.
        Subsequent columns are dedicated to the xyz coordinates of the
        residues in solution (excluding those in the nanoparticle).

Data Layout:
    The layout of the columns is as follows:
    Time Frame | NP (x, y, z) | Residues (Sx1, Sy1, Sz1, Sx2, Sy2, Sz2,
    ...)
    S stands for order parameter

Alignment with com_pickle:
    The file is structured to align with the com_pickle file, which
    contains the center of mass of each particle in the system. This
    alignment facilitates the integration and comparative analysis of
    order parameters with spatial data.
"""

from dataclasses import dataclass

from common import logger
from common.colors_text import TextColor as bcolors


@dataclass
class FileConfig:
    """set the file names"""
    com_pickle: str = 'com_pickle'
    op_pickle: str = 'order_parameter.pickle'


@dataclass
class AllConfig(FileConfig):
    """set all the configuratiions"""


class GetOorderParameter:
    """
    Processing and splitting the data based on the residues type
    """

    info_msg: str = 'Message from GetOorderParameter:\n'
    configs: AllConfig

    def __init__(self,
                 log: logger.logging.Logger,
                 configs: AllConfig = AllConfig()
                 ) -> None:
        self.configs = configs

    def _write_msg(self,
                   log: logger.logging.Logger  # To log
                   ) -> None:
        """write and log messages"""
        print(f'{bcolors.OKCYAN}{GetOorderParameter.__name__}:\n'
              f'\t{self.info_msg}{bcolors.ENDC}')
        log.info(self.info_msg)


if __name__ == '__main__':
    GetOorderParameter(log=logger.setup_logger('order_parameter_prase.log'))
