"""
Plot Radial Distribution Function (RDF) Calculated from GROMACS

This script plots the radial distribution function (RDF) and cumulative
distribution function (CDF) for Chloroacetate (CLA) at the surface of
a nanoparticle (NP). It utilizes data generated by GROMACS.

GROMACS offers two methods for calculating RDF:
    1. Based on the center of mass (COM) of the NP.
    2. Based on the outermost residues of the NP, specifically APTES
        (APTES being the functional groups on the NP).

The script generates the following plots:
    - RDF plots for both COM-based and outermost residue-based
        calculations.
    - CDF plots corresponding to both calculation methods.

Inputs:
    The script requires RDF and CDF data files for each calculation
        method. It will generate plots if these files are present.

Notes:
    - The script is specifically designed for RDF and CDF analysis in
        the context of nanoparticles and their surface functional
        groups.
    - Ensure that the input data files are in the correct format as
        expected by the script.

Here plots all the data from one viewpoint on one canvas
Opt. by ChatGPt
Saeed
30 Jan 2024
"""

import typing
from dataclasses import dataclass, field

from common import logger, plot_tools, xvg_to_dataframe
from common.colors_text import TextColor as bcolors


@dataclass
class BaseGraphConfig:
    """Basic setups for graphs"""

    # pylint: disable=too-many-instance-attributes
    graph_suffix: str = 'gmx.png'
    ycol_name: str = 'density'
    xcol_name: str = 'r_nm'

    labels: dict[str, str] = field(default_factory=lambda: {
        'title': 'Computed density',
        'ylabel': 'g(r)',
        'xlabel': 'r [nm]'
    })

    graph_styles: dict[str, typing.Any] = field(default_factory=lambda: {
        'label': 'density',
        'color': 'black',
        'marker': 'o',
        'linestyle': '-',
        'markersize': 0,
    })

    line_styles: list[str] = \
        field(default_factory=lambda: ['-', ':', '--', '-.'])
    colors: list[str] = \
        field(default_factory=lambda: ['black', 'red', 'blue', 'green'])

    height_ratio: float = (5 ** 0.5 - 1) * 1.5

    y_unit: str = ''

    legend_loc: str = 'lower right'


@dataclass
class FileConfig:
    """setups for the input files names and their columns name"""
    # comfile: files which are the viewpoint are the com of the np
    # shellfile: files which are the viewpoint are the shell of the np
    com_file: dict[str, dict[str, typing.Any]] = field(
        default_factory=lambda: {
            'com_0': {'fname': 'com0.xv', 'ycol': '0'},
            'com_1': {'fname': 'com2.xv', 'ycol': '1'},
            'com_2': {'fname': 'com2.xv', 'ycol': '2'}
            })

    shell_file: dict[str, dict[str, typing.Any]] = field(
        default_factory=lambda: {
            'shell_0': {'fname': 'shell0.xv', 'ycol': '0'},
            'shell_1': {'fname': 'shell2.xv', 'ycol': '1'},
            'shell_2': {'fname': 'shell2.xv', 'ycol': '2'}
            })


class AllConfig(FileConfig):
    """Set the all the configs"""
    plot_configs: BaseGraphConfig = field(default_factory=BaseGraphConfig)


class PlotMultiRdf:
    """Plot multi rdf graphs on canvas"""

    info_msg: str = 'Message from PlotMultiRdf:\n'
    congfigs: AllConfig

    def __init__(self,
                 log: logger.logging.Logger,
                 congfigs: AllConfig = AllConfig()
                 ) -> None:
        self.congfigs = congfigs
        self.write_msg(log)

    def write_msg(self,
                  log: logger.logging.Logger
                  ) -> None:
        """Write and log messages."""
        print(f'{bcolors.OKCYAN}{PlotMultiRdf.__name__}:\n'
              f'\t{self.info_msg}{bcolors.ENDC}')
        log.info(self.info_msg)


if __name__ == '__main__':
    PlotMultiRdf(log=logger.setup_logger('multi_rdf_plot.log'))
